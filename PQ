/*
Power Query Function: fnGetDeliveryDates
DESCRIPTION: Generates a list of delivery dates from the report's start year up to the year after today based on structured scheduling metadata (frequency + free-text delivery rules).
PARAMETERS:
frequency (text): Type of recurrence (e.g., "Monthly", "Quarterly", etc.)
startDate (date): First effective reporting date
deliveryText (nullable text): Raw delivery schedule description (e.g. "15 Working Day", "Tuesday and Friday")
calendar (table): A working day calendar table with the following columns:
Date (date)
IsWorkingDay (logical)
WeekdayName (text, e.g., "Monday")
RETURNS:
List of delivery dates (list of date) */
(frequency as text, startDate as date, deliveryText as nullable text, calendar as table) as list => let years = { Date.Year(startDate) .. Date.Year(DateTime.LocalNow()) + 1 },
// === Helper Functions ===

GetWorkingDays = (year, month) =>
    Table.SelectRows(calendar, each Date.Year([Date]) = year and Date.Month([Date]) = month and Record.FieldOrDefault(_, "IsWorkingDay", false) = true),

GetNthWorkingDay = (year, month, n) =>
    let wd = GetWorkingDays(year, month) in if List.Count(wd[Date]) >= n then wd{n - 1}[Date] else null,

GetNthCalendarDay = (year, month, n) =>
    let
        d = try #date(year, month, n) otherwise null,
        shifted = if d <> null and Record.FieldOrDefault(Table.SelectRows(calendar, each [Date] = d){0}, "IsWorkingDay", false) = false then
            List.First(Table.SelectRows(calendar, each [Date] > d and [IsWorkingDay] = true)[Date])
        else d
    in shifted,

GetLastWorkingDay = (year, month) =>
    let wd = GetWorkingDays(year, month) in try List.Last(wd[Date]) otherwise null,

FromEndOfMonth = (year, month, offsetWDays) =>
    let
        base = #date(year, month, Date.DaysInMonth(#date(year, month, 1))),
        wd = Table.SelectRows(calendar, each [Date] > base and Record.FieldOrDefault(_, "IsWorkingDay", false) = true),
        result = if List.Count(wd[Date]) >= offsetWDays then wd{offsetWDays - 1}[Date] else null
    in result,

FromEndOfQuarter = (year, quarterMonth, offsetMonths, offsetWDays) =>
    let
        base = #date(year, quarterMonth, Date.DaysInMonth(#date(year, quarterMonth, 1))),
        shifted = Date.AddMonths(base, offsetMonths),
        wd = Table.SelectRows(calendar, each [Date] > shifted and Record.FieldOrDefault(_, "IsWorkingDay", false)),
        result = if List.Count(wd[Date]) >= offsetWDays then wd{offsetWDays - 1}[Date] else null
    in result,

GetNthFriday = (year, month, n) =>
    let
        fridays = Table.SelectRows(calendar, each Date.Year([Date]) = year and Date.Month([Date]) = month and [WeekdayName] = "Friday" and [IsWorkingDay] = true),
        result = if List.Count(fridays[Date]) >= n then fridays{n - 1}[Date] else null
    in result,

ExtractLeadingNumber = (txt as text) as nullable number =>
    let
        digits = Text.Select(txt, {"0".."9"}),
        num = try Number.FromText(digits) otherwise null
    in num,

// === Frequency Logic ===

HandleMonthly = List.Combine(List.Transform(years, each
    let
        y = _,
        months = List.Transform({1..12}, each
            let
                month = _,
                ltxt = if deliveryText <> null then Text.Lower(deliveryText) else "",
                daynum = ExtractLeadingNumber(ltxt)
            in
                if Text.Contains(ltxt, "calendar") and daynum <> null then GetNthCalendarDay(y, month, daynum)
                else if Text.Contains(ltxt, "working") and daynum <> null then GetNthWorkingDay(y, month, daynum)
                else if Text.Contains(ltxt, "end of month") and Text.Contains(ltxt, "working") and daynum <> null then FromEndOfMonth(y, month, daynum)
                else null)
    in List.RemoveNulls(months))
),

HandleDaily = Table.SelectRows(calendar, each [Date] >= startDate and Record.FieldOrDefault(_, "IsWorkingDay", false))[Date],

HandleWeekly = 
    if deliveryText <> null then
        let
            lowerText = Text.Lower(deliveryText),
            dayList = List.Select({"Monday", "Tuesday", "Wednesday", "Thursday", "Friday"}, each Text.Contains(lowerText, Text.Start(_, 3))),
            dates = Table.SelectRows(calendar, each [Date] >= startDate and List.Contains(dayList, [WeekdayName]))[Date]
        in dates
    else
        {},

HandleAnnually = List.Transform(years, each
    let
        ltxt = if deliveryText <> null then Text.Lower(deliveryText) else ""
    in
        if Text.Contains(ltxt, "march") then GetLastWorkingDay(_, 3)
        else if Text.Contains(ltxt, "january") then GetLastWorkingDay(_, 1)
        else if Text.Contains(ltxt, "february") then GetLastWorkingDay(_, 2)
        else if Text.Contains(ltxt, "july") then GetLastWorkingDay(_, 7)
        else null
),

HandleBiAnnually = List.Combine(List.Transform(years, each
    let
        ltxt = if deliveryText <> null then Text.Lower(deliveryText) else "",
        cleaned = Text.Replace(Text.Replace(ltxt, "&", ","), " and ", ","),
        periodList = Text.Split(cleaned, ","),
        parsed = List.Transform(List.RemoveNulls(periodList), each
            if Text.Contains(_, "october") then GetNthWorkingDay(_, 10, 15)
            else if Text.Contains(_, "january") then GetNthWorkingDay(_, 1, 15)
            else if Text.Contains(_, "march") then GetNthWorkingDay(_, 3, 15)
            else null)
    in List.RemoveNulls(parsed)
)),

HandleQuarterly = List.Combine(List.Transform(years, each 
    let
        ltxt = if deliveryText <> null then Text.Lower(deliveryText) else "",
        quarters = {
            if Text.Contains(ltxt, "plus 8") then FromEndOfQuarter(_, 3, 0, 8) else null,
            if Text.Contains(ltxt, "2 months") then FromEndOfQuarter(_, 6, 2, 1) else null,
            if Text.Contains(ltxt, "plus 10") then FromEndOfQuarter(_, 12, 0, 10) else null,
            if Text.Contains(ltxt, "end of quarter") then FromEndOfQuarter(_, 9, 0, 0) else null
        }
    in List.RemoveNulls(quarters))
),

HandleCustomPatterns = List.Combine(List.Transform(years, each
    let
        y = _,
        ltxt = if deliveryText <> null then Text.Lower(deliveryText) else "",
        custom = 
            if Text.Contains(ltxt, "3rd week of march") then GetNthFriday(y, 3, 3)
            else if Text.Contains(ltxt, "2nd week of march") then GetNthFriday(y, 3, 2)
            else if Text.Contains(ltxt, "3rd week of the month") then List.Transform({1..12}, each GetNthFriday(y, _, 3))
            else if Text.Contains(ltxt, "mid october") and not Text.Contains(ltxt, "january") then GetNthWorkingDay(y, 10, 15)
            else if Text.Contains(ltxt, "mid january") and not Text.Contains(ltxt, "october") then GetNthWorkingDay(y, 1, 15)
            else if Text.Contains(ltxt, "mid october") and Text.Contains(ltxt, "january") then { GetNthWorkingDay(y, 10, 15), GetNthWorkingDay(y, 1, 15) }
            else null
    in if custom is list then List.RemoveNulls(custom) else {custom}
)),

Result =
    if frequency = "Daily" then HandleDaily
    else if frequency = "Weekly" then HandleWeekly
    else if frequency = "Monthly" then HandleMonthly
    else if frequency = "Annually" then HandleAnnually
    else if frequency = "Bi-Annually" then HandleBiAnnually
    else if frequency = "Quarterly" then HandleQuarterly
    else if frequency = "On Demand" then {}
    else {},

Final = List.RemoveNulls(Result & HandleCustomPatterns)

in List.Distinct(Final)
