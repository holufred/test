/*
===========================================
 Power Query Function: fnGetDeliveryDates
===========================================
DESCRIPTION:
Generates a list of delivery dates from the report's start year up to the year after today,
using frequency and delivery schedule text. Supports working day and calendar day logic,
weekday-based logic, and end-of-period offsets for quarterly/bi-annual/annual frequencies.

PARAMETERS:
- frequency (text): Type of recurrence (e.g., "Monthly", "Quarterly", etc.)
- startDate (date): First effective reporting date
- deliveryText (nullable text): Description of schedule (e.g. "15 Working Day", "Tuesday")
- calendar (table): Calendar table with columns:
    * Date (date)
    * IsWorkingDay (logical)
    * WeekdayName (text)

RETURNS:
- List of delivery dates (list of date)
*/

(frequency as text, startDate as date, deliveryText as nullable text, calendar as table) as list =>
let
    // Build year range from start year to next year after today
    years = { Date.Year(startDate) .. Date.Year(DateTime.LocalNow()) + 1 },

    // === Helper Functions ===

    GetWorkingDays = (year, month) =>
        Table.SelectRows(calendar, each Date.Year([Date]) = year and Date.Month([Date]) = month and Record.FieldOrDefault(_, "IsWorkingDay", false)),

    GetNthWorkingDay = (year, month, n) =>
        let wd = GetWorkingDays(year, month) in try wd{n - 1}[Date] otherwise null,

    GetNthCalendarDay = (year, month, n) =>
        let
            base = try #date(year, month, n) otherwise null,
            adjusted = if base <> null and Record.FieldOrDefault(Table.SelectRows(calendar, each [Date] = base){0}, "IsWorkingDay", false) = false then
                try Table.SelectRows(calendar, each [Date] > base and [IsWorkingDay]){0}[Date] otherwise null
            else base
        in adjusted,

    GetLastWorkingDay = (year, month) =>
        let
            lastCalendar = #date(year, month, Date.DaysInMonth(#date(year, month, 1))),
            isWorking = Record.FieldOrDefault(Table.SelectRows(calendar, each [Date] = lastCalendar){0}, "IsWorkingDay", false),
            result = if isWorking then lastCalendar else try Table.SelectRows(calendar, each [Date] > lastCalendar and [IsWorkingDay]){0}[Date] otherwise null
        in result,

    GetWeekdayInMonth = (year, month, dayAbbr as text) =>
        let
            match = List.First(List.Select({"Monday", "Tuesday", "Wednesday", "Thursday", "Friday"}, each Text.StartsWith(_, Text.Proper(dayAbbr)))),
            dates = Table.SelectRows(calendar, each Date.Year([Date]) = year and Date.Month([Date]) = month and [WeekdayName] = match),
            first = try dates{0}[Date] otherwise null
        in first,

    FromEndOfQuarter = (year, quarterMonth, offsetMonths, offsetWDays) =>
        let
            base = #date(year, quarterMonth, Date.DaysInMonth(#date(year, quarterMonth, 1))),
            shifted = Date.AddMonths(base, offsetMonths),
            wd = Table.SelectRows(calendar, each [Date] > shifted and Record.FieldOrDefault(_, "IsWorkingDay", false)),
            result = try wd{offsetWDays - 1}[Date] otherwise null
        in result,

    ExtractLeadingNumber = (txt as text) as nullable number =>
        let match = Text.Select(txt, {"0".."9"}) in try Number.FromText(match) otherwise null,

    // === Frequency Logic ===

    HandleMonthly = List.Combine(List.Transform(years, each 
        let 
            y = _,
            months = List.Transform({1..12}, (m) =>
                let
                    day = ExtractLeadingNumber(deliveryText)
                in
                    if deliveryText <> null and Text.Contains(Text.Lower(deliveryText), "calendar") and day <> null then
                        GetNthCalendarDay(y, m, day)
                    else if deliveryText <> null and Text.Contains(Text.Lower(deliveryText), "working") and day <> null then
                        GetNthWorkingDay(y, m, day)
                    else null
            )
        in months
    )),

    HandleDaily = Table.SelectRows(calendar, each [Date] >= startDate and Record.FieldOrDefault(_, "IsWorkingDay", false))[Date],

    HandleWeekly = 
        if deliveryText <> null then
            let
                lowerText = Text.Lower(deliveryText),
                dayList = List.Select({"Monday", "Tuesday", "Wednesday", "Thursday", "Friday"}, each Text.Contains(lowerText, Text.Start(_, 3))),
                dates = Table.SelectRows(calendar, each [Date] >= startDate and List.Contains(dayList, [WeekdayName]))[Date]
            in dates
        else {},

    HandleAnnually = List.Transform(years, each
        if deliveryText <> null and Text.Contains(Text.Lower(deliveryText), "march") then GetLastWorkingDay(_, 3)
        else if deliveryText <> null and Text.Contains(Text.Lower(deliveryText), "january") then GetLastWorkingDay(_, 1)
        else null
    ),

    HandleBiAnnually = List.Combine(List.Transform(years, each
        let 
            periodList = Text.Split(Text.Lower(Text.Replace(Text.Replace(deliveryText, "&", ","), " and ", ",")), ","),
            parsed = List.Transform(List.RemoveNulls(periodList), each 
                if Text.Contains(_, "october") then GetNthWorkingDay(_, 10, 15)
                else if Text.Contains(_, "january") then GetNthWorkingDay(_, 1, 15)
                else if Text.Contains(_, "march") then GetNthWorkingDay(_, 3, 15)
                else null)
        in List.RemoveNulls(parsed)
    )),

    HandleQuarterly = List.Combine(List.Transform(years, each 
        let quarters = {
            if deliveryText <> null and Text.Contains(Text.Lower(deliveryText), "plus 8") then FromEndOfQuarter(_, 3, 0, 8) else null,
            if deliveryText <> null and Text.Contains(Text.Lower(deliveryText), "2 months") then FromEndOfQuarter(_, 6, 2, 1) else null,
            if deliveryText <> null and Text.Contains(Text.Lower(deliveryText), "plus 10") then FromEndOfQuarter(_, 12, 0, 10) else null,
            if deliveryText <> null and Text.Contains(Text.Lower(deliveryText), "end of quarter") then FromEndOfQuarter(_, 9, 0, 0) else null
        }
        in List.RemoveNulls(quarters))
    ),

    Result =
        if frequency = "Daily" then HandleDaily
        else if frequency = "Weekly" then HandleWeekly
        else if frequency = "Monthly" then HandleMonthly
        else if frequency = "Annually" then HandleAnnually
        else if frequency = "Bi-Annually" then HandleBiAnnually
        else if frequency = "Quarterly" then HandleQuarterly
        else if frequency = "On Demand" then {} // Treat as no recurrence
        else {}

in
    List.Distinct(List.RemoveNulls(Result))
