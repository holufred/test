/*
===========================================
 Power Query Function: fnGetDeliveryDates
===========================================
DESCRIPTION:
Generates a list of delivery dates from the report's start year up to the year after today
based on structured scheduling metadata (frequency + free-text delivery rules).

PARAMETERS:
- frequency (text): Type of recurrence (e.g., "Monthly", "Quarterly", etc.)
- startDate (date): First effective reporting date
- deliveryText (nullable text): Raw delivery schedule description (e.g. "15 Working Day", "Tuesday and Friday")
- calendar (table): A working day calendar table with the following columns:
    * Date (date)
    * IsWorkingDay (logical)
    * WeekdayName (text, e.g., "Monday")

RETURNS:
- List of delivery dates (list of date)
*/

(frequency as text, startDate as date, deliveryText as nullable text, calendar as table) as list =>
let
    years = { Date.Year(startDate) .. Date.Year(DateTime.LocalNow()) + 1 },

    // === Helper Functions ===

    GetWorkingDays = (year, month) =>
        Table.SelectRows(calendar, each Date.Year([Date]) = year and Date.Month([Date]) = month and Record.FieldOrDefault(_, "IsWorkingDay", false) = true),

    GetNthWorkingDay = (year, month, n) =>
        let wd = GetWorkingDays(year, month) in try wd{n - 1}[Date] otherwise null,

    GetNthCalendarDay = (year, month, n) =>
        let base = try #date(year, month, n) otherwise null in
        if base <> null and Record.FieldOrDefault(Table.SelectRows(calendar, each [Date] = base){0}?, "IsWorkingDay", false) = false then
            try Table.SelectRows(calendar, each [Date] > base and [IsWorkingDay]){0}[Date] otherwise null
        else base,

    GetLastWorkingDay = (year, month) =>
        let wd = GetWorkingDays(year, month) in try List.Last(wd[Date]) otherwise null,

    GetNthFriday = (year, month, n) =>
        let
            fridays = Table.SelectRows(calendar, each Date.Year([Date]) = year and Date.Month([Date]) = month and [WeekdayName] = "Friday"),
            result = try fridays{n - 1}[Date] otherwise null
        in result,

    FromEndOfMonth = (year, month, offsetWDays) =>
        let
            base = #date(year, month, Date.DaysInMonth(#date(year, month, 1))),
            wd = Table.SelectRows(calendar, each [Date] > base and [IsWorkingDay]),
            result = try wd{offsetWDays - 1}[Date] otherwise null
        in result,

    FromEndOfQuarter = (year as number, quarterMonth as number, offsetMonths as number, offsetWDays as number) as nullable date =>
        let
            base = #date(year, quarterMonth, Date.DaysInMonth(#date(year, quarterMonth, 1))),
            shifted = Date.AddMonths(base, offsetMonths),
            wd = Table.SelectRows(calendar, each [Date] > shifted and [IsWorkingDay]),
            result = try wd{offsetWDays - 1}[Date] otherwise null
        in result,

    ExtractLeadingNumber = (txt as text) as nullable number =>
        let numericText = Text.Select(txt, {"0".."9"}) in try Number.FromText(numericText) otherwise null,

    ExtractMultipleNumbers = (txt as text) as list =>
        let
            textCleaned = Text.Replace(Text.Replace(txt, "(", ""), ")", ""),
            splitText = Text.SplitAny(textCleaned, " ,+"),
            numbers = List.Transform(List.Select(splitText, each Text.ContainsAny(_, {"0".."9"})), each try Number.FromText(_) otherwise null)
        in List.RemoveNulls(numbers),

    // === Frequency Logic ===

    HandleMonthly =
        List.Combine(
            List.Transform(years, each (y) =>
                let
                    dates = List.Transform({1..12}, each (m) =>
                        if deliveryText = "1 Working Day" then GetNthWorkingDay(y, m, 1) else
                        if deliveryText = "2 Working Day" then GetNthWorkingDay(y, m, 2) else
                        if deliveryText = "3 Working Day" then GetNthWorkingDay(y, m, 3) else
                        if deliveryText = "4 Working Day" then GetNthWorkingDay(y, m, 4) else
                        if deliveryText = "5 Working Day" then GetNthWorkingDay(y, m, 5) else
                        if deliveryText = "6 Working Day" or deliveryText = "6 working day" then GetNthWorkingDay(y, m, 6) else
                        if deliveryText = "7 Working Day" then GetNthWorkingDay(y, m, 7) else
                        if deliveryText = "8 Working Day" then GetNthWorkingDay(y, m, 8) else
                        if deliveryText = "9 Working Day" then GetNthWorkingDay(y, m, 9) else
                        if deliveryText = "10 Working Day" then GetNthWorkingDay(y, m, 10) else
                        if deliveryText = "12 Working Day" then GetNthWorkingDay(y, m, 12) else
                        if deliveryText = "15 Working Day" then GetNthWorkingDay(y, m, 15) else
                        if deliveryText = "16 Working Day" then GetNthWorkingDay(y, m, 16) else
                        if deliveryText = "18 Working Day" then GetNthWorkingDay(y, m, 18) else
                        if deliveryText = "23 Working Day (10+13)" then GetNthWorkingDay(y, m, 10) else
                        if deliveryText = "10 Calendar Day" then GetNthCalendarDay(y, m, 10) else
                        if deliveryText = "17 Calendar Day" or deliveryText = "17 calendar Day" then GetNthCalendarDay(y, m, 17) else
                        if deliveryText = "19 Calendar Day" then GetNthCalendarDay(y, m, 19) else
                        if deliveryText = "3rd week of the month" then GetNthFriday(y, m, 3) else
                        null
                    )
                in List.RemoveNulls(dates)
            )
        ),

    HandleQuarterly =
        List.Combine(
            List.Transform(years, each (y) =>
                let
                    dates = {
                        if deliveryText = "End of quarter + 1 month" then Date.AddMonths(#date(y,3,1), 1) else null,
                        if deliveryText = "End of Quarter + 1 Month + 10 Working Day" then FromEndOfQuarter(y, 3, 1, 10) else null,
                        if deliveryText = "End of Quarter + 8 Working Day" then FromEndOfQuarter(y, 3, 0, 8) else null,
                        if deliveryText = "End of Quarter + 5 Working Day" then FromEndOfQuarter(y, 3, 0, 5) else null,
                        if deliveryText = "End of Quarter + 6 Working Day" then FromEndOfQuarter(y, 3, 0, 6) else null,
                        if deliveryText = "End of Quarter + 10 Working Day" then FromEndOfQuarter(y, 3, 0, 10) else null,
                        if deliveryText = "End of Quarter + 15 Working Day" then FromEndOfQuarter(y, 3, 0, 15) else null,
                        if deliveryText = "End of Quarter + 2 Month" then Date.AddMonths(#date(y, 3, 1), 2) else null,
                        if deliveryText = "2nd week of the month" then GetNthFriday(y, 3, 2) else null,
                        if deliveryText = "3rd week of the month" then GetNthFriday(y, 3, 3) else null,
                        if deliveryText = "23 Working Day (10+13)" then GetNthWorkingDay(y, 3, 10) else null,
                        if deliveryText = "20 Working Day" then GetNthWorkingDay(y, 3, 20) else null,
                        if deliveryText = "18 Working Day" then GetNthWorkingDay(y, 3, 18) else null
                    }
                in List.RemoveNulls(dates)
            )
        ),

    HandleWeekly =
        if deliveryText = "Monday" then Table.SelectRows(calendar, each [WeekdayName] = "Monday" and [Date] >= startDate and [IsWorkingDay])[Date]
        else if deliveryText = "Tuesday" then Table.SelectRows(calendar, each [WeekdayName] = "Tuesday" and [Date] >= startDate and [IsWorkingDay])[Date]
        else if deliveryText = "Tuesday and Friday" then Table.SelectRows(calendar, each ([WeekdayName] = "Tuesday" or [WeekdayName] = "Friday") and [Date] >= startDate and [IsWorkingDay])[Date]
        else {},

    HandleAnnually =
        List.Transform(years, each (y) =>
            if deliveryText = "End of March" then GetLastWorkingDay(y, 3) else
            if deliveryText = "Mid July" then GetNthWorkingDay(y, 7, 15) else
            if deliveryText = "End of January" then GetLastWorkingDay(y, 1) else
            if deliveryText = "Mid March" then GetNthWorkingDay(y, 3, 15) else
            if deliveryText = "End of February" then GetLastWorkingDay(y, 2) else
            if deliveryText = "3rd week of March" then GetNthFriday(y, 3, 3) else
            null
        ),

    HandleBiAnnually =
        List.Combine(List.Transform(years, each (y) =>
            let
                dates = {
                    if deliveryText = "Mid October" then GetNthWorkingDay(y, 10, 15) else null,
                    if deliveryText = "Mid October & Mid January" or deliveryText = "Mid October and Mid January" then GetNthWorkingDay(y, 10, 15) else null,
                    if deliveryText = "Mid October & Mid January" or deliveryText = "Mid October and Mid January" then GetNthWorkingDay(y, 1, 15) else null
                }
            in List.RemoveNulls(dates)
        )),

    HandleDaily = Table.SelectRows(calendar, each [Date] >= startDate and [IsWorkingDay])[Date],

    Result =
        if frequency = "Daily" then HandleDaily
        else if frequency = "Weekly" then HandleWeekly
        else if frequency = "Monthly" then HandleMonthly
        else if frequency = "Annually" then HandleAnnually
        else if frequency = "Bi-Annually" then HandleBiAnnually
        else if frequency = "Quarterly" then HandleQuarterly
        else {}

in
    List.Distinct(List.RemoveNulls(Result))
