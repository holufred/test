/*
Power Query Function: fnGetDeliveryDates
DESCRIPTION: Generates a list of delivery dates from the report's start year up to the year after today based on structured scheduling metadata (frequency + free-text delivery rules).
PARAMETERS:
frequency (text): Type of recurrence (e.g., "Monthly", "Quarterly", etc.)
startDate (date): First effective reporting date
deliveryText (nullable text): Raw delivery schedule description (e.g. "15 Working Day", "Tuesday and Friday")
calendar (table): A working day calendar table with the following columns:
Date (date)
IsWorkingDay (logical)
WeekdayName (text, e.g., "Monday")
RETURNS:
List of delivery dates (list of date) */
(frequency as text, startDate as date, deliveryText as nullable text, calendar as table) as list => let years = { Date.Year(startDate) .. Date.Year(DateTime.LocalNow()) + 1 },
// === Helper Functions ===

GetWorkingDays = (year, month) =>
    Table.SelectRows(calendar, each Date.Year([Date]) = year and Date.Month([Date]) = month and Record.FieldOrDefault(_, "IsWorkingDay", false) = true),

GetNthWorkingDay = (year, month, n) =>
    let wd = GetWorkingDays(year, month) in try wd{n - 1}[Date] otherwise null,

GetNthCalendarDay = (year, month, n) =>
    let
        rawDate = try #date(year, month, n) otherwise null,
        adjusted = if rawDate <> null and Table.Contains(calendar, [Date = rawDate, IsWorkingDay = true]) then rawDate
                   else try Table.SelectRows(calendar, each [Date] > rawDate and Record.FieldOrDefault(_, "IsWorkingDay", false) = true){0}[Date] otherwise null
    in adjusted,

GetLastWorkingDay = (year, month) =>
    let wd = GetWorkingDays(year, month) in try List.Last(wd[Date]) otherwise null,

GetWeekdayInMonth = (year, month, weekday as text, nth as number) =>
    let
        weekdayName = Text.Proper(weekday),
        allMatches = Table.SelectRows(calendar, each Date.Year([Date]) = year and Date.Month([Date]) = month and [WeekdayName] = weekdayName and Record.FieldOrDefault(_, "IsWorkingDay", false) = true),
        result = try allMatches{nth - 1}[Date] otherwise null
    in result,

FromEndOfMonth = (year, month, offsetWDays) =>
    let
        base = #date(year, month, Date.DaysInMonth(#date(year, month, 1))),
        wd = Table.SelectRows(calendar, each [Date] > base and Record.FieldOrDefault(_, "IsWorkingDay", false) = true),
        result = try wd{offsetWDays - 1}[Date] otherwise null
    in result,

FromEndOfQuarter = (year, quarterMonth, offsetMonths, offsetWDays) =>
    let
        base = #date(year, quarterMonth, Date.DaysInMonth(#date(year, quarterMonth, 1))),
        shifted = Date.AddMonths(base, offsetMonths),
        wd = Table.SelectRows(calendar, each [Date] > shifted and Record.FieldOrDefault(_, "IsWorkingDay", false)),
        result = try wd{offsetWDays - 1}[Date] otherwise null
    in result,

ExtractLeadingNumber = (txt as text) as nullable number =>
    let match = Text.Select(txt, {"0".."9"}) in try Number.FromText(match) otherwise null,

HandleMonthly = List.Combine(List.Transform(years, each
    let y = _,
        months = List.Transform({1..12}, each
            if deliveryText <> null and Text.Contains(Text.Lower(deliveryText), "calendar") then
                let n = ExtractLeadingNumber(deliveryText) in GetNthCalendarDay(y, _, n)
            else if deliveryText <> null and Text.Contains(Text.Lower(deliveryText), "working") then
                let n = ExtractLeadingNumber(deliveryText) in GetNthWorkingDay(y, _, n)
            else null)
    in List.RemoveNulls(months))
),

HandleDaily = Table.SelectRows(calendar, each [Date] >= startDate and Record.FieldOrDefault(_, "IsWorkingDay", false))[Date],

HandleWeekly = 
    if deliveryText <> null then
        let
            lowerText = Text.Lower(deliveryText),
            dayList = List.Select({"Monday", "Tuesday", "Wednesday", "Thursday", "Friday"}, each Text.Contains(lowerText, Text.Start(_, 3))),
            dates = Table.SelectRows(calendar, each [Date] >= startDate and List.Contains(dayList, [WeekdayName]))[Date]
        in dates
    else
        {},

HandleAnnually = List.Transform(years, each
    if deliveryText <> null and Text.Contains(Text.Lower(deliveryText), "march") then GetNthWorkingDay(_, 3, 15)
    else if deliveryText <> null and Text.Contains(Text.Lower(deliveryText), "july") then GetNthWorkingDay(_, 7, 15)
    else if deliveryText <> null and Text.Contains(Text.Lower(deliveryText), "january") then GetNthWorkingDay(_, 1, 15)
    else if deliveryText <> null and Text.Contains(Text.Lower(deliveryText), "february") then GetNthWorkingDay(_, 2, 15)
    else null
),

HandleBiAnnually = List.Combine(List.Transform(years, each
    let
        periodList = if deliveryText <> null then Text.Split(Text.Lower(Text.Replace(Text.Replace(deliveryText, "&", ","), " and ", ",")), ",") else {},
        parsed = List.Transform(List.RemoveNulls(periodList), (p) =>
            if Text.Contains(p, "october") then GetNthWorkingDay(_, 10, 15)
            else if Text.Contains(p, "january") then GetNthWorkingDay(_, 1, 15)
            else if Text.Contains(p, "march") then GetNthWorkingDay(_, 3, 15)
            else null)
    in List.RemoveNulls(parsed)
)),

HandleQuarterly = List.Combine(List.Transform(years, each
    let quarters = {
        if deliveryText <> null and Text.Contains(Text.Lower(deliveryText), "plus 8") then FromEndOfQuarter(_, 3, 0, 8) else null,
        if deliveryText <> null and Text.Contains(Text.Lower(deliveryText), "2 months") then FromEndOfQuarter(_, 6, 2, 1) else null,
        if deliveryText <> null and Text.Contains(Text.Lower(deliveryText), "plus 10") then FromEndOfQuarter(_, 12, 0, 10) else null,
        if deliveryText <> null and Text.Contains(Text.Lower(deliveryText), "end of quarter") then FromEndOfQuarter(_, 9, 0, 1) else null
    }
    in List.RemoveNulls(quarters))
),

HandleCustomNamed = List.Combine(List.Transform(years, each
    let
        lower = Text.Lower(deliveryText),
        outputs = {
            if Text.Contains(lower, "3rd week of march") then GetWeekdayInMonth(_, 3, "Friday", 3) else null,
            if Text.Contains(lower, "2nd week of the month") then List.Transform({1..12}, (m) => GetWeekdayInMonth(_, m, "Friday", 2)) else null,
            if Text.Contains(lower, "3rd week of the month") then List.Transform({1..12}, (m) => GetWeekdayInMonth(_, m, "Friday", 3)) else null,
            if Text.Contains(lower, "mid october") then GetNthWorkingDay(_, 10, 15) else null,
            if Text.Contains(lower, "mid january") then GetNthWorkingDay(_, 1, 15) else null
        }
    in List.RemoveNulls(List.Combine(List.Transform(outputs, each if _ is list then _ else {_})))
)),

Result =
    if frequency = "Daily" then HandleDaily
    else if frequency = "Weekly" then HandleWeekly
    else if frequency = "Monthly" then HandleMonthly
    else if frequency = "Annually" then HandleAnnually
    else if frequency = "Bi-Annually" then HandleBiAnnually
    else if frequency = "Quarterly" then HandleQuarterly
    else if frequency = "On Demand" then {} // Treat as no recurrence
    else HandleCustomNamed

in List.Distinct(List.RemoveNulls(Result))
