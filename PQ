/*
===========================================
 Power Query Function: fnGetDeliveryDates
===========================================
DESCRIPTION:
Generates a list of delivery dates from the report's start year up to the year after today
based on structured scheduling metadata (frequency + free-text delivery rules).

PARAMETERS:
- frequency (text): Type of recurrence (e.g., "Monthly", "Quarterly", etc.)
- startDate (date): First effective reporting date
- deliveryText (nullable text): Raw delivery schedule description (e.g. "15 Working Day", "Tuesday and Friday")
- calendar (table): A working day calendar table with the following columns:
    * Date (date)
    * IsWorkingDay (logical)
    * WeekdayName (text, e.g., "Monday")

RETURNS:
- List of delivery dates (list of date)
*/

(frequency as text, startDate as date, deliveryText as nullable text, calendar as table) as list =>
let
    years = { Date.Year(startDate) .. Date.Year(DateTime.LocalNow()) + 1 },

    // === Helper Functions ===

    GetWorkingDays = (year, month) =>
        Table.SelectRows(calendar, each Date.Year([Date]) = year and Date.Month([Date]) = month and Record.FieldOrDefault(_, "IsWorkingDay", false) = true),

    GetNthWorkingDay = (year, month, n) =>
        let wd = GetWorkingDays(year, month) in try wd{n - 1}[Date] otherwise null,

    GetNthCalendarDay = (year, month, n) =>
        let base = try #date(year, month, n) otherwise null in
        if base <> null and Record.FieldOrDefault(Table.SelectRows(calendar, each [Date] = base){0}?, "IsWorkingDay", false) = false then
            try Table.SelectRows(calendar, each [Date] > base and [IsWorkingDay]){0}[Date] otherwise null
        else base,

    GetLastWorkingDay = (year, month) =>
        let wd = GetWorkingDays(year, month) in try List.Last(wd[Date]) otherwise null,

    GetNthFriday = (year, month, n) =>
        let
            fridays = Table.SelectRows(calendar, each Date.Year([Date]) = year and Date.Month([Date]) = month and [WeekdayName] = "Friday"),
            result = try fridays{n - 1}[Date] otherwise null
        in result,

    FromEndOfMonth = (year, month, offsetWDays) =>
        let
            base = #date(year, month, Date.DaysInMonth(#date(year, month, 1))),
            wd = Table.SelectRows(calendar, each [Date] > base and [IsWorkingDay]),
            result = try wd{offsetWDays - 1}[Date] otherwise null
        in result,

    FromEndOfQuarter = (year, quarterMonth, offsetMonths, offsetWDays) =>
        let
            base = #date(year, quarterMonth, Date.DaysInMonth(#date(year, quarterMonth, 1))),
            shifted = Date.AddMonths(base, offsetMonths),
            wd = Table.SelectRows(calendar, each [Date] > shifted and [IsWorkingDay]),
            result = try wd{offsetWDays - 1}[Date] otherwise null
        in result,

    ExtractLeadingNumber = (txt as text) as nullable number =>
        let
            digitList = List.Select(Text.ToList(txt), each Value.Is(Value.FromText(_), type number)),
            asText = Text.Combine(digitList, "")
        in try Number.FromText(asText) otherwise null,

    ExtractMultipleNumbers = (txt as text) as list =>
        let
            chars = Text.ToList(txt),
            accum = List.Generate(() => [i = 0, buffer = ""],
                each [i] < List.Count(chars),
                each
                    if Value.Is(Value.FromText(chars{i}), type number) then
                        [i = i + 1, buffer = buffer & chars{i}]
                    else if buffer <> "" then
                        [i = i + 1, buffer = ""]
                    else
                        [i = i + 1, buffer = ""],
                each if buffer <> "" then Number.FromText(buffer) else null
            ),
            filtered = List.Select(accum, each _ <> null)
        in filtered,

    // === Frequency Logic ===

    HandleDaily = Table.SelectRows(calendar, each [Date] >= startDate and [IsWorkingDay])[Date],

    HandleWeekly = 
        if deliveryText = "Tuesday" then Table.SelectRows(calendar, each [WeekdayName] = "Tuesday" and [Date] >= startDate and [IsWorkingDay])[Date]
        else if deliveryText = "Monday" then Table.SelectRows(calendar, each [WeekdayName] = "Monday" and [Date] >= startDate and [IsWorkingDay])[Date]
        else if deliveryText = "Tuesday and Friday" then Table.SelectRows(calendar, each ([WeekdayName] = "Tuesday" or [WeekdayName] = "Friday") and [Date] >= startDate and [IsWorkingDay])[Date]
        else {},

    HandleAnnually = List.Combine(List.Transform(years, each
        let y = _,
            date = 
                if deliveryText = "End of March" then GetLastWorkingDay(y, 3)
                else if deliveryText = "End of February" then GetLastWorkingDay(y, 2)
                else if deliveryText = "End of January" then GetLastWorkingDay(y, 1)
                else if deliveryText = "Mid July" then GetNthWorkingDay(y, 7, 15)
                else if deliveryText = "Mid March" then GetNthWorkingDay(y, 3, 15)
                else if deliveryText = "3rd week of March" then GetNthFriday(y, 3, 3)
                else null
        in if date <> null then {date} else {}
    )),

    HandleBiAnnually = List.Combine(List.Transform(years, each
        let y = _,
            dateList = 
                if deliveryText = "Mid October" then { GetNthWorkingDay(y, 10, 15) }
                else if deliveryText = "Mid October & Mid January" then { GetNthWorkingDay(y, 10, 15), GetNthWorkingDay(y, 1, 15) }
                else {}
        in List.RemoveNulls(dateList)
    )),

    HandleMonthly = List.Combine(List.Transform(years, each
        let y = _,
            months = List.Transform({1..12}, each
                if deliveryText = "1 Working Day" then GetNthWorkingDay(y, _, 1)
                else if deliveryText = "2 Working Day" then GetNthWorkingDay(y, _, 2)
                else if deliveryText = "3 Working Day" then GetNthWorkingDay(y, _, 3)
                else if deliveryText = "4 Working Day" then GetNthWorkingDay(y, _, 4)
                else if deliveryText = "5 Working Day" then GetNthWorkingDay(y, _, 5)
                else if deliveryText = "6 Working Day" then GetNthWorkingDay(y, _, 6)
                else if deliveryText = "7 Working Day" then GetNthWorkingDay(y, _, 7)
                else if deliveryText = "8 Working Day" then GetNthWorkingDay(y, _, 8)
                else if deliveryText = "9 Working Day" then GetNthWorkingDay(y, _, 9)
                else if deliveryText = "10 Working Day" then GetNthWorkingDay(y, _, 10)
                else if deliveryText = "12 Working Day" then GetNthWorkingDay(y, _, 12)
                else if deliveryText = "15 Working Day" then GetNthWorkingDay(y, _, 15)
                else if deliveryText = "16 Working Day" then GetNthWorkingDay(y, _, 16)
                else if deliveryText = "18 Working Day" then GetNthWorkingDay(y, _, 18)
                else if deliveryText = "23 Working Day (10+13)" then null // special case handled below
                else if deliveryText = "1st Working Day" then GetNthWorkingDay(y, _, 1)
                else if deliveryText = "10 Calendar Day" then GetNthCalendarDay(y, _, 10)
                else if deliveryText = "17 Calendar Day" then GetNthCalendarDay(y, _, 17)
                else if deliveryText = "19 Calendar Day" then GetNthCalendarDay(y, _, 19)
                else if deliveryText = "3rd week of the month" then GetNthFriday(y, _, 3)
                else null)
        in List.RemoveNulls(months)
    )),

    HandleQuarterly = List.Combine(List.Transform(years, each
        let y = _,
            qMonths = {3, 6, 9, 12},
            all = List.Combine(List.Transform(qMonths, each
                if deliveryText = "End of quarter + 1 month" then [Date.AddMonths(#date(y, _, Date.DaysInMonth(#date(y, _, 1))), 1)]
                else if deliveryText = "End of Quarter + 1 Month + 10 Working Day" then [FromEndOfQuarter(y, _, 1, 10)]
                else if deliveryText = "End of Quarter + 8 Working Day" then [FromEndOfQuarter(y, _, 0, 8)]
                else if deliveryText = "End of Quarter + 5 Working Day" then [FromEndOfQuarter(y, _, 0, 5)]
                else if deliveryText = "End of Quarter + 6 Working Day" then [FromEndOfQuarter(y, _, 0, 6)]
                else if deliveryText = "End of Quarter + 10 Working Day" then [FromEndOfQuarter(y, _, 0, 10)]
                else if deliveryText = "End of Quarter + 15 Working Day" then [FromEndOfQuarter(y, _, 0, 15)]
                else if deliveryText = "End of Quarter + 2 Month" then [Date.AddMonths(#date(y, _, Date.DaysInMonth(#date(y, _, 1))), 2)]
                else if deliveryText = "2nd week of the month" then [GetNthFriday(y, _, 2)]
                else if deliveryText = "3rd week of the month" then [GetNthFriday(y, _, 3)]
                else if deliveryText = "23 Working Day (10+13)" then [GetNthWorkingDay(y, _, 10), GetNthWorkingDay(y, _, 13)]
                else if deliveryText = "20 Working Day" then [GetNthWorkingDay(y, _, 20)]
                else if deliveryText = "18 Working Day" then [GetNthWorkingDay(y, _, 18)]
                else {}
            ))
        in List.RemoveNulls(all)
    )),

    Result =
        if frequency = "Daily" then HandleDaily
        else if frequency = "Weekly" then HandleWeekly
        else if frequency = "Monthly" then HandleMonthly
        else if frequency = "Annually" then HandleAnnually
        else if frequency = "Bi-Annually" then HandleBiAnnually
        else if frequency = "Quarterly" then HandleQuarterly
        else {}

in
    List.Distinct(List.RemoveNulls(Result))
