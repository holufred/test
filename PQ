/*

Power Query Function: fnGetDeliveryDates

DESCRIPTION: Generates a list of delivery dates from the report's start year up to the year after today based on structured scheduling metadata (frequency + free-text delivery rules).

PARAMETERS:

frequency (text): Type of recurrence (e.g., "Monthly", "Quarterly", etc.)

startDate (date): First effective reporting date

deliveryText (nullable text): Raw delivery schedule description (e.g. "15 Working Day", "Tuesday and Friday")

calendar (table): A working day calendar table with the following columns:

Date (date)

IsWorkingDay (logical)

WeekdayName (text, e.g., "Monday")



RETURNS:

List of delivery dates (list of date) */


(frequency as text, startDate as date, deliveryText as nullable text, calendar as table) as list => let years = { Date.Year(startDate) .. Date.Year(DateTime.LocalNow()) + 1 },

// === Helper Functions ===

GetWorkingDays = (year, month) =>
    Table.SelectRows(calendar, each Date.Year([Date]) = year and Date.Month([Date]) = month and Record.FieldOrDefault(_, "IsWorkingDay", false) = true),

GetNthWorkingDay = (year, month, n) =>
    let wd = GetWorkingDays(year, month) in try wd{n - 1}[Date] otherwise null,

GetNthCalendarDay = (year, month, n) =>
    let
        raw = try #date(year, month, n) otherwise null,
        adjusted = if raw <> null and Table.SelectRows(calendar, each [Date] = raw and [IsWorkingDay])[Date]{0}? <> null then raw
                   else try Table.SelectRows(calendar, each [Date] > raw and [IsWorkingDay])[Date]{0} otherwise null
    in adjusted,

GetLastWorkingDay = (year, month) =>
    let wd = GetWorkingDays(year, month) in try List.Last(wd[Date]) otherwise null,

GetNthWeekdayInMonth = (year, month, weekday as text, nth as number) =>
    let
        days = Table.SelectRows(calendar, each Date.Year([Date]) = year and Date.Month([Date]) = month and [WeekdayName] = weekday and [IsWorkingDay] = true),
        val = try days{nth - 1}[Date] otherwise null
    in val,

FromEndOfMonth = (year, month, offsetWDays) =>
    let
        base = #date(year, month, Date.DaysInMonth(#date(year, month, 1))),
        wd = Table.SelectRows(calendar, each [Date] > base and [IsWorkingDay]),
        result = try wd{offsetWDays - 1}[Date] otherwise null
    in result,

FromEndOfQuarter = (year, quarterMonth, offsetMonths, offsetWDays) =>
    let
        base = #date(year, quarterMonth, Date.DaysInMonth(#date(year, quarterMonth, 1))),
        shifted = Date.AddMonths(base, offsetMonths),
        wd = Table.SelectRows(calendar, each [Date] > shifted and [IsWorkingDay]),
        result = try wd{offsetWDays - 1}[Date] otherwise null
    in result,

ExtractLeadingNumber = (txt as text) as nullable number =>
    let match = Text.Select(txt, {"0".."9"}) in try Number.FromText(match) otherwise null,

ParseMonthName = (txt as text) =>
    let
        monthNames = {"january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december"},
        matched = List.First(List.Select(monthNames, each Text.Contains(txt, _)), null)
    in matched,

HandleMonthly = List.Combine(List.Transform(years, each 
    let y = _, 
        months = List.Transform({1..12}, each 
            if deliveryText <> null and Text.Contains(Text.Lower(deliveryText), "calendar") then
                ExtractLeadingNumber(deliveryText)? |> each GetNthCalendarDay(y, _, _)
            else if deliveryText <> null and Text.Contains(Text.Lower(deliveryText), "working") then
                ExtractLeadingNumber(deliveryText)? |> each GetNthWorkingDay(y, _, _)
            else null)
    in months)
),

HandleDaily = Table.SelectRows(calendar, each [Date] >= startDate and [IsWorkingDay])[Date],

HandleWeekly = 
    if deliveryText <> null then
        let
            lowerText = Text.Lower(deliveryText),
            dayList = List.Select({"Monday", "Tuesday", "Wednesday", "Thursday", "Friday"}, each Text.Contains(lowerText, Text.Start(_, 3))),
            dates = Table.SelectRows(calendar, each [Date] >= startDate and List.Contains(dayList, [WeekdayName]))[Date]
        in dates
    else
        {},

HandleAnnually = List.Transform(years, each
    if deliveryText <> null then
        let
            lower = Text.Lower(deliveryText)
        in
            if Text.Contains(lower, "march") and Text.Contains(lower, "3rd week") then GetNthWeekdayInMonth(_, 3, "Friday", 3)
            else if Text.Contains(lower, "march") and Text.Contains(lower, "mid") then GetNthCalendarDay(_, 3, 15)
            else if Text.Contains(lower, "january") and Text.Contains(lower, "mid") then GetNthCalendarDay(_, 1, 15)
            else if Text.Contains(lower, "january") then GetNthCalendarDay(_, 1, 31)
            else if Text.Contains(lower, "february") then GetNthCalendarDay(_, 2, 28)
            else if Text.Contains(lower, "july") then GetNthCalendarDay(_, 7, 31)
            else null
    else null
),

HandleBiAnnually = List.Combine(List.Transform(years, each
    let 
        lower = Text.Lower(Text.Trim(deliveryText)),
        cleanText = Text.Replace(Text.Replace(lower, "&", ","), " and ", ","),
        periodList = List.Transform(Text.Split(cleanText, ","), each Text.Trim(_)),
        parsed = List.Transform(List.RemoveNulls(periodList), each 
            if Text.Contains(_, "october") then GetNthCalendarDay(_, 10, 15)
            else if Text.Contains(_, "january") then GetNthCalendarDay(_, 1, 15)
            else null)
    in List.RemoveNulls(parsed)
)),

HandleQuarterly = List.Combine(List.Transform(years, each 
    let quarters = {
        if deliveryText <> null and Text.Contains(Text.Lower(deliveryText), "plus 8") then FromEndOfQuarter(_, 3, 0, 8) else null,
        if deliveryText <> null and Text.Contains(Text.Lower(deliveryText), "2 months") then FromEndOfQuarter(_, 6, 2, 1) else null,
        if deliveryText <> null and Text.Contains(Text.Lower(deliveryText), "plus 10") then FromEndOfQuarter(_, 12, 0, 10) else null,
        if deliveryText <> null and Text.Contains(Text.Lower(deliveryText), "end of quarter") then FromEndOfQuarter(_, 9, 0, 0) else null
    }
    in List.RemoveNulls(quarters))
),

Result =
    if frequency = "Daily" then HandleDaily
    else if frequency = "Weekly" then HandleWeekly
    else if frequency = "Monthly" then HandleMonthly
    else if frequency = "Annually" then HandleAnnually
    else if frequency = "Bi-Annually" then HandleBiAnnually
    else if frequency = "Quarterly" then HandleQuarterly
    else if frequency = "On Demand" then {} // Treat as no recurrence
    else {}

in List.Distinct(List.RemoveNulls(Result))

